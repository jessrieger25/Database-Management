----------------------------------------------------------------------------------------
-- Courses and Prerequisites
-- by Jessica Rieger
-- Tested on Postgres 9.3.2
----------------------------------------------------------------------------------------
--drop statements—
drop table if exists prerequisites;
drop table if exists courses;


--
-- The table of courses.
--
create table Courses (
    num      integer not null,
    name     text    not null,
    credits  integer not null,
  primary key (num)
);


insert into Courses(num, name, credits)
values (499, 'CS/ITS Capping', 3 );

insert into Courses(num, name, credits)
values (308, 'Database Systems', 4 );

insert into Courses(num, name, credits)
values (221, 'Software Development Two', 4 );

insert into Courses(num, name, credits)
values (220, 'Software Development One', 4 );

insert into Courses(num, name, credits)
values (120, 'Introduction to Programming', 4);

select * 
from courses
order by num ASC;


--
-- Courses and their prerequisites
--
create table Prerequisites (
    courseNum integer not null references Courses(num),
    preReqNum integer not null references Courses(num),
  primary key (courseNum, preReqNum)
);

insert into Prerequisites(courseNum, preReqNum)
values (499, 308);

insert into Prerequisites(courseNum, preReqNum)
values (499, 221);

insert into Prerequisites(courseNum, preReqNum)
values (308, 120);

insert into Prerequisites(courseNum, preReqNum)
values (221, 220);

insert into Prerequisites(courseNum, preReqNum)
values (220, 120);

select *
from Prerequisites
order by courseNum DESC;


--
-- An example stored procedure ("function")
--
create or replace function get_courses_by_credits(int, REFCURSOR) returns refcursor as 
$$
declare
   num_credits int       := $1;
   resultset   REFCURSOR := $2;
begin
   open resultset for 
      select num, name, credits
      from   courses
       where  credits >= num_credits;
   return resultset;
end;
$$ 
language plpgsql;

--Function PreReqs which returns the immediate prerequisites for a course.

create or replace function PreReqsFor(int, REFCURSOR) returns refcursor as
$$
declare
   course_num int       := $1;
   resultset   REFCURSOR := $2;
begin
   open resultset for 
      select preReqNum
      from Prerequisites
      where  courseNum = course_num;
   return resultset;
end;
$$ 
language plpgsql;

--Function isPreReqFor(courseNum) returns the courses that the entered course is the prerequisite for.

create or replace function IsPreReqFor(int, REFCURSOR) returns refcursor as
$$
declare
   course_num int       := $1;
   resultset   REFCURSOR := $2;
begin
   open resultset for 
      select courseNum
      from Prerequisites
      where  preReqNum = course_num;
   return resultset;
end;
$$ 
language plpgsql;

--Jedi level (My best attempt)—
--Function isPreReqFor(courseNum) returns the courses that the entered course is the prerequisite for.
create or replace function AllPreReqFor(int, REFCURSOR) returns refcursor as
$$
declare
   course_num int       := $1;
   resultsetList   REFCURSOR := $2;
   resultsetAll	   REFCURSOR  := $3;
begin
   open resultsetList for 
	prereqsFor(course_num);
   for r in select courseNum from resultsetList
   Loop
	resultsetAll UNION DISTINCT course_num;
        return AllPreReqFor(r);
   END LOOP;
   
end;
$$ 
language plpgsql;

select get_courses_by_credits(0, 'results');
Fetch all from results;

select PreReqsFor(499, 'results2');
Fetch all from results2;

select IsPreReqFor(120, 'results3');
Fetch all from results3;

AllPreReqFor(499, 'results4')
Fetch all from results4;
